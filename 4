class Solution 
{
public:
    double helper(vector<int>& A, vector<int>& B)
    {
        int m = A.size(); 
        int n = B.size(); 
        
        int imin = 0;
        int imax = m; 
        int half_len = (m+n+1)/2; 
        
        while(imin <= imax)
        {
            int i = (imin + imax) / 2; 
            int j = half_len - i;
            
            if( j > 0 && i < m && B[j-1] > A[i] )
            {
                //# i is too small, must increase it
                imin = i + 1; 
            }
            else if( i > 0 && j < n && A[i-1] > B[j] )
            {
                imax = i - 1; 
            }
            else
            {
                int maxofleft; 
                int minofright; 
                if(i == 0)
                    maxofleft = B[j-1]; 
                else if( j == 0 )
                {
                    maxofleft = A[i-1]; 
                }
                else
                    maxofleft = max(A[i-1], B[j-1]);
                    
                if ( (m + n) % 2 == 1 )
                    return maxofleft ;  
                   
                if(i == m)
                    minofright = B[j] ;
                else if( j == n )
                    minofright = A[i] ;
                else
                    minofright = min(A[i], B[j])   ;
                    
                return (maxofleft + minofright) / 2.0;
            }
        }
        return 0.0f;
    }
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) 
    {
        int m = nums1.size(); 
        int n = nums2.size(); 
        
        if(m > n)
        {
            return helper(nums2, nums1); 
        }
        else
        {
            return helper(nums1, nums2); 
        }

    }
    //nums1.size() < nums2.size()

};


